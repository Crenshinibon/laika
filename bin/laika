#!/usr/bin/env node

var Phantom = require('node-phantom');
var colors = require('colors');
var Injector = require('../lib/injector');
var App = require('../lib/app');
var AppPool = require('../lib/app_pool');
var ServerConnector = require('../lib/connectors/server.js');
var ClientConnector = require('../lib/connectors/client.js');
var helpers = require('../lib/helpers');
var qbox = require('qbox');
var Mocha = require('mocha');
var fs = require('fs');
var path = require('path');
var Fiber = require('fibers');

var injectPort = helpers.getRandomPort();
var notificationPort = helpers.getRandomPort();
var injector = new Injector();
var deps = qbox.create(2);
var phantom;
var appPool;

console.info('\n  injecting laika...'.blue.bold);
injector.inject();
App.touch(deps.tick.bind(deps));

console.info('  loading phantomjs...'.blue.bold);
Phantom.create(function(err, ph) {
  if(err) {
    console.log('  please install phantomjs to countinue'.red.bold);
    throw err; 
  } else {
    phantom = ph;
    deps.tick();
  }
});

deps.ready(function() {
  console.info('  loading initial app pool...'.blue.bold);
  appPool = new AppPool({size: 4, appDir: './'});
  appPool.on('ready', onAppPoolReady);
});

function onAppPoolReady() {
  // require('mocha/bin/_mocha');
  var mocha = new Mocha;
  mocha.reporter('spec').ui('tdd');
  
  var testsPath = process.argv[2] || './tests';
  identifyTests(testsPath, mocha);
  var runner = mocha.run(atTheEnd);
}

function identifyTests(path, mocha) {
  var stat = fs.statSync(path);
  if(stat.isDirectory()) {
    scanFiles(path, mocha, {});
  } else {
    mocha.addFile(path);
  }
}

function scanFiles(dir, mocha, options) {
  options = options || {};
  var files = fs.readdirSync(dir);

  files.forEach(function(file) {
    var filename = path.resolve(dir, file);
    var stat = fs.statSync(filename);
    if(stat.isDirectory()) {
      scanFiles(filename, mocha, options);
    } else {
      mocha.addFile(filename);
    }
  });
}

ltest = lit = function(message, callback) {

  this.test(message, mockTest);
  function mockTest(done) {    
    var completed = false;
    var args = [];

    //create new server with different db and port
    var app = appPool.get();
    var appPort = app.port
    var mongoDbname = app.dbname;
    var appUrl = "http://localhost:" + appPort;

    app.ready(function(injectPort) {
      if(callback.length == 0) {
        args = [];
      } else if(callback.length == 1) {
        args = [cleanAndDone];
      } else if(callback.length == 2) {
        args = [cleanAndDone, new ServerConnector(injectPort)];
      } else {
        args = [cleanAndDone, new ServerConnector(injectPort)];
        var noClients = callback.length - 2;
        for(var lc = 0; lc<noClients; lc++) {
          args.push(new ClientConnector(phantom, appUrl));
        }
      }

      Fiber(function() {
        callback.apply(null, args);
        if(args.length == 0) {
          completeTest();
        }
      }).run();
    });

    function cleanAndDone() {
      if(!completed) {
        args.slice(1).forEach(function(connector) {
          connector.close();
        });
        completeTest();      
      }
    }

    function completeTest() {
      app.close(function() {
        completed = true;
        done();
      });
    }
  }
}

function atTheEnd() {
  console.log('  cleaning up injected code\n'.blue.bold);
  injector.clean();
  appPool.close();
  phantom._phantom.kill();
  setTimeout(function() {
    process.exit(0);
  }, 100);
}
