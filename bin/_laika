#!/usr/bin/env node

var Phantom = require('node-phantom');
var colors = require('colors');
var Injector = require('../lib/injector');
var App = require('../lib/app');
var AppPool = require('../lib/app_pool');
var testLogic = require('../lib/test_logic');
var helpers = require('../lib/helpers');
var qbox = require('qbox');
var Mocha = require('mocha');
var fs = require('fs');
var path = require('path');
var exec = require('child_process').exec;

var injector = new Injector();
var deps = qbox.create(2);
var phantom;
var appPool;
var ended = false;

module.exports = {
  run: function(argv) {
    helpers.makeAssertFiberFriendly();

    //laika drops dbs after the test without any problem
    //if if you close laika with "CTRL + C" or laika got some internal error
    //ther is possibility of having some leaked dbs
    //this will ensure dropping them
    dropLaikaDbs(checkMongoDB);

    function checkMongoDB() {
      var mongoUrl = "mongodb://localhost:" + argv.mport;
      helpers.checkForMongoDB(mongoUrl, function(connected, err) {
        if(connected) {
          initialize();
        } else {
          var errorMessage = '  MONGODB_ERROR: ' + err.message;
          console.log(errorMessage.red.bold);
          process.exit(1);
        }
      });
    }
    
    function initialize() {
      console.info('\n  injecting laika...'.blue.bold);
      injector.inject();
      App.touch(deps.tick.bind(deps), {mongoPort: argv.mport});

      console.info('  loading phantomjs...'.blue.bold);
      Phantom.create(afterPhantomCreated);

      //make sure this get ended everytime
      process.once('exit', function() {
        atTheEnd(1);
      });
    }

    function afterPhantomCreated(err, ph) {
      if(err) {
        console.log('  please install phantomjs to countinue'.red.bold);
        throw err; 
      } else {
        phantom = ph;
        deps.tick();
      }
    }

    deps.ready(function() {
      console.info('  loading initial app pool...'.blue.bold);
      appPool = new AppPool({size: 2, appDir: './', mongoPort: argv.mport});
      appPool.on('ready', onAppPoolReady);
      appPool.once('needExit', function() {
        atTheEnd(1);
      });
      if(argv.ui == 'tdd') {
        test = testLogic(appPool, phantom);
        ltest = ltestWithWarning(test);
      } else if(argv.ui == 'bdd') {
        it = testLogic(appPool, phantom);
      }
    });

    function onAppPoolReady() {
      // require('mocha/bin/_mocha');
      var mocha = new Mocha;
      mocha.reporter(argv.reporter).ui(argv.ui).timeout(argv.timeout);
      
      var testsPath = argv._[0] || './tests';
      identifyTests(testsPath, mocha);
      var runner = mocha.run(function(failedCount) {
        var exitCode = (failedCount > 0)? 1: 0;
        atTheEnd(exitCode);
      });
    }

    function identifyTests(path, mocha) {
      var stat = fs.statSync(path);
      if(stat.isDirectory()) {
        scanFiles(path, mocha, {});
      } else {
        mocha.addFile(path);
      }
    }

    function scanFiles(dir, mocha, options) {
      options = options || {};
      var files = fs.readdirSync(dir);

      files.forEach(function(file) {
        var filename = path.resolve(dir, file);
        var stat = fs.statSync(filename);
        if(stat.isDirectory()) {
          scanFiles(filename, mocha, options);
        } else {
          mocha.addFile(filename);
        }
      });
    }

    function atTheEnd(exitCode) {
      if(!ended) {
        console.log('  cleaning up injected code\n'.blue.bold);
        injector.clean();
        phantom._phantom.kill('SIGKILL');
        appPool.close(function() {
          process.exit(exitCode);
        });
        ended = true;
      }
    }
  },

  version: function() {
    var packageJson = require('../package.json');
    console.log(packageJson.version);
  },

  actions: require('../lib/actions')
};

function ltestWithWarning(test) {
  var warned = false;
  return function() {
    if(!warned) {
      warned = true;
      console.warn('\n  WARNING: '.red.bold + 'ltest'.white.bold + ' is deprecated, use '.red.bold + 'test'.white.bold + ' instead'.red.bold);
    }
    test.apply(this, arguments);
  };
}

function dropLaikaDbs(callback) {
  //apply drop command with probability of 1/10
  var dropThisTime = Math.ceil(Math.random() * 10) == 5;
  if(dropThisTime) {
    var scriptsFolder = path.resolve(__dirname, '../scripts');
    exec('mongo drop-laika-dbs.js', {cwd: scriptsFolder}, callback);
  } else {
    callback();
  }
}
